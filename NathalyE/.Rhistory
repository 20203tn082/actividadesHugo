a2
a <- a1 / a2
a
b1 <- (sum(as.numeric(datamarketing$Sales))*sum(datamarketing$x2)) - (sum(as.numeric(datamarketing$Sales))*sum(datamarketing$xy))
b <- b1 / a2
b
b1
b1 <- (sum(as.numeric(datamarketing$Sales))*sum(datamarketing$x2)) - (sum(as.numeric(datamarketing$Spend))*sum(datamarketing$xy))
b1
b <- b1 / a2
b
datamarketing$y <- (a*as.numeric(datamarketing$Spend))+b
datamarketing
plot(datamarketing$Spend, datamarketing$Sales)
plot(datamarketing$Spend, datamarketing$Sales)
abline(datamarketing$xy)
abline(datamarketing$y)
plot(datamarketing$Spend, datamarketing$Sales)
install.packages("ggplot2")
library(ggplot2)
ggplot(datamarketing, aes(x=Spend, y=Sales)) + geom_point()+theme_light()
mod1 <- lm(Sales - Spend, data = datamarketing)
mod1 <- lm(Sales ~ Spend, data = datamarketing)
mod1
ggplot(datamarketing, aes(x=Spend, y=Sales)) + geom_point() + geom_smooth(method='lm', formula = y~x, se = FALSE, col='dodgerblue1') + theme_light()
install.packages("DMwR2"
library("DMwR2")
install.packages("DMwR2")
library("DMwR2")
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv",
header = TRUE,
sep = ",",
dec =".")
View(contaminacion)
kcontaminacion <- knnImputation(contaminacion)
kcontaminacion
rivers
plot.rivers
plot(rivers)
boxplot(rivers, horizontal = true)
boxplot(rivers, horizontal = TRUE)
boxplot.stats(rivers)
variable <- boxplot.stats(rivers)
variable
variable$n
variable$stats
minimo < -min(variable$stats)
minimo <- min(variable$stats)
minimo
maximo <- max(variable$stats)
maximo
inferior <- variable$stats[1]
inferior
delete?
nuevo <- rivers[rivers < superior & rivers > inferior]
nuevo
nuevo <- rivers[rivers < superior & rivers > inferior]
inferior <- variable$stats[1]
superior <- variable$stats[5]
nuevo <- rivers[rivers < superior & rivers > inferior]
nuevo
variable <- boxplot.stats(rivers)
variable
nuevo <- rivers[rivers < superior & rivers > inferior]
nuevo
variable2 <- boxplot.stats(nuevo)
variable2
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out) > 0){
inferior <- variable$stats[1]
superior <- variable$stats[5]
nuevo <- rivers[rivers < superior & rivers > inferior]
variable <- boxplot.stats(nuevo)
}
boxplot(nuevo)
nuevo
nuevo
variable
source("~/Miriam 9°A/BD/Regresión lineal.R")
setwd("~/Miriam 9°A/BD")
source("~/Miriam 9°A/BD/Regresión lineal.R")
source("~/Miriam 9°A/BD/Regresión lineal.R")
mod <- lm(Sales ~ Spend, data=datamarketing)
mod
mod <- lm(Sales ~ Month + Spend, data=datamarketing)
print(mod)
summary(mod)
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
install.packages("ggplot2")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Regresión polinomial.R")
source("C:/Users/CC7/Documents/actividadesHugo/NathalyE/Clasificación k-nn.R")
source("C:/Users/CC7/Documents/actividadesHugo/NathalyE/Clasificación k-nn.R")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton.csv",
header = TRUE,
sep = ",",
dec =".")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv")
maraton$nivel <- cut(maraton$time, breaks=3, labes=c("alto","medio", "bajo"))
View(maraton)
maraton$nivel <- cut(maraton$time, breaks = 3, labels = c("alto","medio","bajo"))
View(maraton)
source("~/actividadesHugo/NathalyE/Clase13Junio.R")
install.packages(scaes)
install.packages("scales")
library("scales")
data_conv <- read.csv("data-conversion.csv")
(data_conv$Age-min(data_conv$Age))/(max(data_conv$Age)-min(data_conv$Age))
rescale(data_conv$Age)
salary <- read.csv("salary.csv")
scale(salary[,c(1,2)])
plot(salary)
View(saary)
escalado <- scale(salary[,c(1,2)])
plot(escalado)
View(salary)
plot(escalado[,1])
plot(escalado[,2])
x <- sin(seq(0,4 * pi, length.out = 100))
plot(x, type = "l")
plot(x, type = "l")
#agrega ineas y ese color
lines(smoothing(x, method = "smooth"), type="l", col="blue")
lines(smoothing(x, method = "smooth"), type="l", col="blue")
x <- sin(seq(0,4 * pi, length.out = 100)) + rnorm(100, 0, 0.2) #Generar una onda
plot(x, type = "l")
lines(smoothing(x, method = "smooth"), type="l", col="blue")
install.packages("modelbased")
library("modelbased")
lines(smoothing(x, method = "smooth"), type="l", col="blue")
lines(smoothing(x, method = "loess"), type="l", col="red")
plot(salary$salary, type="l")
lines(smoothing(salary$salary, method = "smooth"), type="l", col="blue")
lines(smoothing(salary$salary, method = "loess"), type="l", col="red")
setwd("C:\\Users\\CC7\\Downloads")
movies <- read.csv("movies.csv")
#Verifica si existen valores faltantes.
is.na(movies)
#¿Cuántos valores faltantes existen en el dataframe?
nrow(is.na(movies))
#¿Cuántos valores faltantes existen en el dataframe?
count(is.na(movies))
#¿Cuántos valores faltantes existen en el dataframe?
movies[!complete.cases(movies,)]
#¿Cuántos valores faltantes existen en el dataframe?
movies[!complete.cases(movies),]
nrow(movies[!complete.cases(movies),])
#Guardar en un nuevo dataframe las observaciones que no tiene datos faltantes.
na.omit(movies);
#Guardar en un nuevo dataframe las observaciones que no tiene datos faltantes.
moviesv2 <- na.omit(movies);
View(moviesv2)
nrow(moviesv2[!complete.cases(moviesv2),])
#Sustituye los valores faltantes de las
#columnas rating y votes, con las técnicas de promedio y moda, respectivamente
view(moviesv2)
#Sustituye los valores faltantes de las
#columnas rating y votes, con las técnicas de promedio y moda, respectivamente
View(moviesv2)
#Sustituye los valores faltantes de las
#columnas rating y votes, con las técnicas de promedio y moda, respectivamente
View(movies)
#Sustituye los valores faltantes de las
#columnas rating y votes, con las técnicas de promedio y moda, respectivamente
View(movies)
#Sustituye los valores faltantes de las
#columnas rating y votes, con las técnicas de promedio y moda, respectivamente
View(movies)
movies$RATING <- ifelse(is.na(movies$RATING),
mean(movies$RATING,na.rm = TRUE),
movies$RATING)
View(movies)
View(movies)
#Esta es para votes(moda)
install.packages(modeest)
#Esta es para votes(moda)
install.packages("modeest")
library("modeest")
View(movies)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mfv(movies$VOTES,na_rm = TRUE), movies$VOTES)
View(movies)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mfv(movies$VOTES,na_rm = TRUE), movies$VOTES)
View(movies)
View(movies)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mfv(movies$VOTES, na_rm = TRUE),
movies$VOTES)
movies
mfv(movies$VOTES)
mfv(movies$VOTES)
View(movies)
movies <-boxplot.stats(movies)
View(movies)
movies$RunTime <- knnImputation(movies$RunTime)
installed.packages(DMwR2)
installed.packages(DMwR)
installed.packages(DMwR2)
library(DMwR2)
library(DMwR2)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies$RunTime <- knnImputation(movies$RunTime)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies$RunTime <- knnImputation(movies$RunTime)
View(movies)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies <- knnImputation(movies$RunTime)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies <- knnImputation(movies)
View(movies)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies <- knnImputation(movies$RunTime)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mean(movies$VOTES, na_rm = TRUE),
movies$VOTES)
View(movies)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mean(movies$VOTES, na_rm = TRUE),
movies$VOTES)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mean(movies$VOTES, na_rm = TRUE),
movies$VOTES)
movies <- knnImputation(movies)
?knnImputation
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, distData = NULL)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, distData = NULL, meth = median)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, distData = NULL, meth = median)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, meth = median)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, meth = "median")
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies, k = 10, meth = "median")
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies, k = 5, meth = "median")
$RunTime
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, meth = median)
View(movies)
movies$YEAR <- ifelse(is.na(movies$YEAR),
mean(movies$YEAR,na.rm = TRUE),
movies$YEAR)
View(movies)
movies$YEAR <- ifelse(!is.na(movies$YEAR),
mean(movies$YEAR,na.rm = TRUE),
movies$YEAR)
post-data <- read.csv("post-data.csv")
setwd("C:\\Users\\CC7\\Downloads")
post-data <- read.csv("post-data.csv")
post-data <- read.csv("post-data.csv")
postData <- read.csv("post-data.csv")
View(postData)
plot(postData$views)
boxplot(postData$views)
plot(postData$views)
plot(postData$views, horizontal = TRUE)
boxplot(postData$views, horizontal = TRUE)
?plot
?boxplot
plot(postData)
plot(postData$views)
boxplot.stat(postData$views)
boxplot.stats(postData$views)
#Agrupo e registro en categorías y sacó el promedio de esas categorías
kcontaminacion <- knnImputation(contaminacion)
rivers
boxplot(rivers, horizontal = TRUE)
#siempre el orden es de menor a mayor cut siempre ordena ascendente
maraton$nivel <- cut(maraton$time, breaks = 3, labels = c("alto","medio","bajo"))
data_conv <- read.csv("data-conversion.csv")
# Primera forma
(data_conv$Age-min(data_conv$Age))/(max(data_conv$Age)-min(data_conv$Age))
#Segunda forma
rescale(data_conv$Age)
salary <- read.csv("salary.csv")
escalado <- scale(salary[,c(1,2)])
escalado <- scale(salary[,c(1,2)])
plot(escalado)
plot(escalado[,1])
plot(escalado[,2])
plot(salary$salary, type="l")
?boxplot
col(postData$views)
boxplot.col(postData$views)
boxplot.matrix(postData$views)
boxplot.default(postData$views)
?boxplot
boxplot(postData$views, plot = TRUE)
?boxplot
boxplot(postData$views,)
boxplot[postData$views,]
plot(postData$views)
plot.xy(postData$views)
plot(postData$views)
?plot
View(postData)
boxplot(nuevo$views)
boxplot(postData$views)
viewsWt <-boxplot.stats(postData$views)
nuevo <- postData
while(length(viewsWt$out) > 0){
inferior <- viewsWt$stats[1]
superior <- viewsWt$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
viewsWt <- boxplot.stats(nuevo)
}
#Elimina los valores atípicos de views y comments.
viewsWt <-boxplot.stats(postData$views)
viewsWt <-boxplot.stats(postData$views)
nuevo <- postData
while(length(var$out) > 0){
inferior <- var$stats[1]
superior <- var$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
var <- boxplot.stats(nuevo)
}
#Elimina los valores atípicos de views y comments.
postData <-boxplot.stats(postData$views)
postData <-boxplot.stats(postData$views)
nuevo <- postData
while(length(postData$out) > 0){
inferior <- postData$stats[1]
superior <- postData$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
postData <- boxplot.stats(nuevo)
}
boxplot(postData$views)
boxplot(postData$views)
boxplot(nuevo$views)
postData
postData <- read.csv("post-data.csv")
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#Elimina los valores atípicos de views y comments.
postData <-boxplot.stats(postData$views)
postData <-boxplot.stats(postData$views)
nuevo <- postData
while(length(postData$out) > 0){
inferior <- postData$stats[1]
superior <- postData$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
postData <- boxplot.stats(nuevo)
}
boxplot(nuevo$views)
postData$views <-boxplot.stats(postData$views)
nuevo <- postData
while(length(postData$out) > 0){
inferior <- postData$stats[1]
superior <- postData$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
postData <- boxplot.stats(nuevo)
}
boxplot(nuevo$views)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#En promedio, ¿cuántas vistas tiene la categorìa Visualization?.
mean(postData[postData$category == "Visualization",])
#En promedio, ¿cuántas vistas tiene la categorìa Visualization?.
mean(postData$views[postData$category == "Visualization",])
#En promedio, ¿cuántas vistas tiene la categorìa Visualization?.
mean(postData$views[postData$category == "Visualization"],)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
postData <-boxplot.stats(postData)
var <-boxplot.stats(postData)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#Elimina los valores atípicos de views y comments.
var <-boxplot.stats(postData)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#¿Cuál es la categoría con mayor cantidad de comentarios?
wich.max(postData$comments)
#¿Cuál es la categoría con mayor cantidad de comentarios?
postData(max(postData$comments))
postData(max(postData$comments))
source("~/.active-rstudio-document")
data <- iris
head(data)
source("~/.active-rstudio-document")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
install.packages("class")
install.packages("caret")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
test.output.knn <- knn(train = train.data, test = test.data, cl = train.dataoutput, k = 3)
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
setwd('C:\\Users\\CC7\\Downloads')
movies <- read.csv('movies.csv')
movies$RunTime <- knnImputation(movies$RunTime)
setwd('C:\\Users\\CC7\\Downloads')
data <- read.csv('post-data.csv')
cuantas <- factor(data$category)
nlevels(cuantas)
data[which.max(data$comments),4]
View(data)
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise(data$views) )
library("dplyr")
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise(data$views) )
resultado
install.packages("mlbench")
library(mlbench)
mlbench(Glas)
Glass
class(mlbench)
library("mlbench")
library(mlbench)
datos <- Glass
library(mlbench)
datos <- Glass
Gl
datos <- data("Glass")
datos
datos <- Glass
datos
class(datos)
summary(datos)
library(caret)
library(class)
entrenamiento <- train(datos, y = 0.7, trControl = datos, tuneGrid )
entrenamiento <- train(datos, y = 0.7, trControl = datos, tuneGrid = datos)
entrenamiento <- createDataPartition(datos, times=1, p=0.8, list=F)
entrenamiento <- createDataPartition(datos, times=1, p=0.7, list=F)
print(datos)
entrenamiento <- createDataPartition(datos, times=1, p=0.7, list=F)
entrenamiento <- createDataPartition(datos, times=1, p=0.7, list=T)
entrenamiento <- createDataPartition(datos, times = 2, p=0.7, list=F)
entrenamiento <- createDataPartition(datos$RI, times = 1, p=0.7, list=F)
train.glass <- datos[entrenamiento,]
train.dataoutput <- datos[entrenamiento,14]
train.glass
test.glass <- datos[-entrenamiento,]
test.glass
modelo <- lm(ri ~ ., data = train.glass)
modelo <- lm(datos ~ ., data = train.glass)
modelo <- lm(datos$RI ~ ., data = train.glass)
modelo <- lm(RI ~ ., data = train.glass)
modelo
prediccion <- predict(modelo, newdata = datos)
prediccion
modelo -<
modelo <- knn(train = train.glass, test = test.glass, cl = 1, k = 5, l =1 )
modelo <- knn(train = train.glass, test = test.glass, cl = 1, k = 5)
a <- matrix(c(19,138,1335,
138,1335,14935.5,
1335,14935.5,181427), nrow = 3)
b <- matrix(c(649.5,5306.6,51666.75), nrow = 3)
solve(a,b)
resistencia <- read.csv("resistencia.csv")
setwd("C:\\Users\\CC7\\Documents\\EjerciciosHugo-Nath")
datos <- read.csv("resistencia.csv")
modelo <- lm(resistencia ~ concentracion, data = datos)
modelo
datosM <- read.csv("marketing.csv")
datosM <- read.csv("marketing.csv")
modelo2M <- lm(sales ~ spend, data = datosM)
datosM <- read.csv("marketing.csv")
datosM
modelo2M <- lm(Sales ~ Spend, data = datosM)
modelo2M
datosM <- datosM[1:12, 1:3]
datosM
modelo2M <- lm(Sales ~ Spend +Month, data = datosM)
modelo2M
datosR <- read.csv("resistencia.csv")
modeloR <- lm(resistencia ~ concentracion + I(concentracion^2), data = datosR)
modeloR
datosR3 <- read.csv("resistencia.csv")
modeloR3 <- lm(resistencia ~ concentracion + I(concentracion^3), data = datosR)
modeloR3
modeloR3 <- lm(resistencia ~ concentracion + I(concentracion^2) + I(concentracion^3), data = datosR)
modeloR3
plot(x = datosR3$concentracion, y= datosR3$resistencia)
prediccion <- predict(modelo, c(16,17))
prediccion <- predict(modeloR3, c(16,17))
prediccion <- predict(modeloR3, data.frame(concentracion =  c(16,17)))
prediccion
setwd("~/Miriam 9°A/BD")
marketing <- read.csv("data-marketing.csv")
marketing
iris
setwd("~/Miriam 9°A/BD")
USArrests
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")

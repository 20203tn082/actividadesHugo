movies$RunTime <- knnImputation(movies$RunTime)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies$RunTime <- knnImputation(movies$RunTime)
View(movies)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies <- knnImputation(movies$RunTime)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies <- knnImputation(movies)
View(movies)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
movies <- knnImputation(movies$RunTime)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mean(movies$VOTES, na_rm = TRUE),
movies$VOTES)
View(movies)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mean(movies$VOTES, na_rm = TRUE),
movies$VOTES)
movies$VOTES <- ifelse(is.na(movies$VOTES),
mean(movies$VOTES, na_rm = TRUE),
movies$VOTES)
movies <- knnImputation(movies)
?knnImputation
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, distData = NULL)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, distData = NULL, meth = median)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, distData = NULL, meth = median)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, meth = median)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, meth = "median")
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies, k = 10, meth = "median")
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies, k = 5, meth = "median")
$RunTime
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
knnImputation(movies$RunTime, k = 10, meth = median)
View(movies)
movies$YEAR <- ifelse(is.na(movies$YEAR),
mean(movies$YEAR,na.rm = TRUE),
movies$YEAR)
View(movies)
movies$YEAR <- ifelse(!is.na(movies$YEAR),
mean(movies$YEAR,na.rm = TRUE),
movies$YEAR)
post-data <- read.csv("post-data.csv")
setwd("C:\\Users\\CC7\\Downloads")
post-data <- read.csv("post-data.csv")
post-data <- read.csv("post-data.csv")
postData <- read.csv("post-data.csv")
View(postData)
plot(postData$views)
boxplot(postData$views)
plot(postData$views)
plot(postData$views, horizontal = TRUE)
boxplot(postData$views, horizontal = TRUE)
?plot
?boxplot
plot(postData)
plot(postData$views)
boxplot.stat(postData$views)
boxplot.stats(postData$views)
#Agrupo e registro en categorías y sacó el promedio de esas categorías
kcontaminacion <- knnImputation(contaminacion)
rivers
boxplot(rivers, horizontal = TRUE)
#siempre el orden es de menor a mayor cut siempre ordena ascendente
maraton$nivel <- cut(maraton$time, breaks = 3, labels = c("alto","medio","bajo"))
data_conv <- read.csv("data-conversion.csv")
# Primera forma
(data_conv$Age-min(data_conv$Age))/(max(data_conv$Age)-min(data_conv$Age))
#Segunda forma
rescale(data_conv$Age)
salary <- read.csv("salary.csv")
escalado <- scale(salary[,c(1,2)])
escalado <- scale(salary[,c(1,2)])
plot(escalado)
plot(escalado[,1])
plot(escalado[,2])
plot(salary$salary, type="l")
?boxplot
col(postData$views)
boxplot.col(postData$views)
boxplot.matrix(postData$views)
boxplot.default(postData$views)
?boxplot
boxplot(postData$views, plot = TRUE)
?boxplot
boxplot(postData$views,)
boxplot[postData$views,]
plot(postData$views)
plot.xy(postData$views)
plot(postData$views)
?plot
View(postData)
boxplot(nuevo$views)
boxplot(postData$views)
viewsWt <-boxplot.stats(postData$views)
nuevo <- postData
while(length(viewsWt$out) > 0){
inferior <- viewsWt$stats[1]
superior <- viewsWt$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
viewsWt <- boxplot.stats(nuevo)
}
#Elimina los valores atípicos de views y comments.
viewsWt <-boxplot.stats(postData$views)
viewsWt <-boxplot.stats(postData$views)
nuevo <- postData
while(length(var$out) > 0){
inferior <- var$stats[1]
superior <- var$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
var <- boxplot.stats(nuevo)
}
#Elimina los valores atípicos de views y comments.
postData <-boxplot.stats(postData$views)
postData <-boxplot.stats(postData$views)
nuevo <- postData
while(length(postData$out) > 0){
inferior <- postData$stats[1]
superior <- postData$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
postData <- boxplot.stats(nuevo)
}
boxplot(postData$views)
boxplot(postData$views)
boxplot(nuevo$views)
postData
postData <- read.csv("post-data.csv")
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#Elimina los valores atípicos de views y comments.
postData <-boxplot.stats(postData$views)
postData <-boxplot.stats(postData$views)
nuevo <- postData
while(length(postData$out) > 0){
inferior <- postData$stats[1]
superior <- postData$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
postData <- boxplot.stats(nuevo)
}
boxplot(nuevo$views)
postData$views <-boxplot.stats(postData$views)
nuevo <- postData
while(length(postData$out) > 0){
inferior <- postData$stats[1]
superior <- postData$stats[5]
nuevo <- nuevo[nuevo < superior & nuevo > inferior]
postData <- boxplot.stats(nuevo)
}
boxplot(nuevo$views)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#En promedio, ¿cuántas vistas tiene la categorìa Visualization?.
mean(postData[postData$category == "Visualization",])
#En promedio, ¿cuántas vistas tiene la categorìa Visualization?.
mean(postData$views[postData$category == "Visualization",])
#En promedio, ¿cuántas vistas tiene la categorìa Visualization?.
mean(postData$views[postData$category == "Visualization"],)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
postData <-boxplot.stats(postData)
var <-boxplot.stats(postData)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#Elimina los valores atípicos de views y comments.
var <-boxplot.stats(postData)
setwd("C:\\Users\\CC7\\Downloads")
postData <- read.csv("post-data.csv")
#¿Cuál es la categoría con mayor cantidad de comentarios?
wich.max(postData$comments)
#¿Cuál es la categoría con mayor cantidad de comentarios?
postData(max(postData$comments))
postData(max(postData$comments))
source("~/.active-rstudio-document")
data <- iris
head(data)
source("~/.active-rstudio-document")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
install.packages("class")
install.packages("caret")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
test.output.knn <- knn(train = train.data, test = test.data, cl = train.dataoutput, k = 3)
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/Clase knn 2706.R")
setwd('C:\\Users\\CC7\\Downloads')
movies <- read.csv('movies.csv')
movies$RunTime <- knnImputation(movies$RunTime)
setwd('C:\\Users\\CC7\\Downloads')
data <- read.csv('post-data.csv')
cuantas <- factor(data$category)
nlevels(cuantas)
data[which.max(data$comments),4]
View(data)
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise(data$views) )
library("dplyr")
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise(data$views) )
resultado
install.packages("mlbench")
library(mlbench)
mlbench(Glas)
Glass
class(mlbench)
library("mlbench")
library(mlbench)
datos <- Glass
library(mlbench)
datos <- Glass
Gl
datos <- data("Glass")
datos
datos <- Glass
datos
class(datos)
summary(datos)
library(caret)
library(class)
entrenamiento <- train(datos, y = 0.7, trControl = datos, tuneGrid )
entrenamiento <- train(datos, y = 0.7, trControl = datos, tuneGrid = datos)
entrenamiento <- createDataPartition(datos, times=1, p=0.8, list=F)
entrenamiento <- createDataPartition(datos, times=1, p=0.7, list=F)
print(datos)
entrenamiento <- createDataPartition(datos, times=1, p=0.7, list=F)
entrenamiento <- createDataPartition(datos, times=1, p=0.7, list=T)
entrenamiento <- createDataPartition(datos, times = 2, p=0.7, list=F)
entrenamiento <- createDataPartition(datos$RI, times = 1, p=0.7, list=F)
train.glass <- datos[entrenamiento,]
train.dataoutput <- datos[entrenamiento,14]
train.glass
test.glass <- datos[-entrenamiento,]
test.glass
modelo <- lm(ri ~ ., data = train.glass)
modelo <- lm(datos ~ ., data = train.glass)
modelo <- lm(datos$RI ~ ., data = train.glass)
modelo <- lm(RI ~ ., data = train.glass)
modelo
prediccion <- predict(modelo, newdata = datos)
prediccion
modelo -<
modelo <- knn(train = train.glass, test = test.glass, cl = 1, k = 5, l =1 )
modelo <- knn(train = train.glass, test = test.glass, cl = 1, k = 5)
a <- matrix(c(19,138,1335,
138,1335,14935.5,
1335,14935.5,181427), nrow = 3)
b <- matrix(c(649.5,5306.6,51666.75), nrow = 3)
solve(a,b)
resistencia <- read.csv("resistencia.csv")
setwd("C:\\Users\\CC7\\Documents\\EjerciciosHugo-Nath")
datos <- read.csv("resistencia.csv")
modelo <- lm(resistencia ~ concentracion, data = datos)
modelo
datosM <- read.csv("marketing.csv")
datosM <- read.csv("marketing.csv")
modelo2M <- lm(sales ~ spend, data = datosM)
datosM <- read.csv("marketing.csv")
datosM
modelo2M <- lm(Sales ~ Spend, data = datosM)
modelo2M
datosM <- datosM[1:12, 1:3]
datosM
modelo2M <- lm(Sales ~ Spend +Month, data = datosM)
modelo2M
datosR <- read.csv("resistencia.csv")
modeloR <- lm(resistencia ~ concentracion + I(concentracion^2), data = datosR)
modeloR
datosR3 <- read.csv("resistencia.csv")
modeloR3 <- lm(resistencia ~ concentracion + I(concentracion^3), data = datosR)
modeloR3
modeloR3 <- lm(resistencia ~ concentracion + I(concentracion^2) + I(concentracion^3), data = datosR)
modeloR3
plot(x = datosR3$concentracion, y= datosR3$resistencia)
prediccion <- predict(modelo, c(16,17))
prediccion <- predict(modeloR3, c(16,17))
prediccion <- predict(modeloR3, data.frame(concentracion =  c(16,17)))
prediccion
setwd("~/Miriam 9°A/BD")
marketing <- read.csv("data-marketing.csv")
marketing
iris
setwd("~/Miriam 9°A/BD")
USArrests
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento.R")
View(iris)
datos <- iris
View(datos)
class(datos)
class(datos$Species)
datos[,1:4] <- scale(datos[,1:4])
View(datos)
tam_train <- floor(0.8 * nrow(datos))
secuencia <- seq_len(nrow(datos))
class(secuencia)
indices_train <- sample(secuencia, size = tam_train)
indices_train
library("modeest")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
library("DMwR2")
datos <- read.csv("AB_NYC_2019.csv")
datos
datos <- read.csv("AB_NYC_2019.csv")
setwd("C:\\Users\\CC7\\Downloads")
datos <- read.csv("AB_NYC_2019.csv")
datos
datos_nyc <- read.csv("AB_NYC_2019.csv")
datos_nyc
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
datos_nyc
datos_nyc$reviews_per_month <- ifelse(datos_nyc$reviews_per_month == "", NA, datos_nyc$reviews_per_month)
datos_nyc
View(datos_nyc)
library("mice")
md.pattern(datos_nyc)
str(md.pattern(datos_nyc))
numObservacionesVacios <- md.pattern(datos_nyc)[3,17]
numObservacionesVacios
observacionesSinVacios <- na.omit(datos_nyc)
observacionesSinVacios
View(observacionesSinVacios)
View(datos_nyc)
View(datos_nyc)
datos_nyc$last_review <- ifelse(is.na(datos_nyc$last_review), mfv(datos_nyc$last_review, na.rm = TRUE), datos_nyc$last_review)
library("modeest")
library("modeest")
datos_nyc$last_review <- ifelse(is.na(datos_nyc$last_review), mfv(datos_nyc$last_review, na.rm = TRUE), datos_nyc$last_review)
datos_nyc$last_review <- ifelse(is.na(datos_nyc$last_review), mfv(datos_nyc$last_review, na_rm = TRUE), datos_nyc$last_review)
View(datos_nyc)
datos_nyc$reviews_per_month <- ifelse(is.na(datos_nyc$reviews_per_month), mfv(datos_nyc$reviews_per_month, na_rm = TRUE), datos_nyc$reviews_per_month)
View(datos_nyc)
datos_nyc <- na.omit(datos_nyc)
View(datos_nyc)
datos_nyc <- read.csv("AB_NYC_2019.csv")
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
datos_nyc$reviews_per_month <- ifelse(datos_nyc$reviews_per_month == "", NA, datos_nyc$reviews_per_month)
View(datos_nyc)
datos_nyc <- na.omit(datos_nyc)
View(datos_nyc)
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
datos_nyc$reviews_per_month <- ifelse(datos_nyc$reviews_per_month == "", NA, datos_nyc$reviews_per_month)
datos_nyc$last_review <- ifelse(is.na(datos_nyc$last_review), mfv(datos_nyc$last_review, na_rm = TRUE), datos_nyc$last_review)
View(datos_nyc)
datos_nyc$reviews_per_month <- ifelse(is.na(datos_nyc$reviews_per_month), mfv(datos_nyc$reviews_per_month, na_rm = TRUE), datos_nyc$reviews_per_month)
View(datos_nyc)
boxplot.stats(datos_nyc$number_of_reviews)
length(boxplot.stats(datos_nyc$number_of_reviews)$out)
tipos <- factor(datos_nyc$room_type)
nlevels(tipos)
tipos
nlevels(tipos)
rownames(nlevels(tipos))
tipos <- row.names(factor(datos_nyc$room_type))
tipos
tipos <-factor(datos_nyc$room_type)
nlevels(tipos)
datos_nyc[datos_nyc$price >= 5000 & datos_nyc$price <= 7500]
View(datos_nyc[datos_nyc$price >= 5000 & datos_nyc$price <= 7500])
nrow(datos_nyc[datos_nyc$price >= 5000 & datos_nyc$price <= 7500])
datos_nyc$price
nrow(datos_nyc[datos_nyc$price >= 5000 & datos_nyc$price <= 7500,])
library("dplyr")
propiedades <- datos_nyc %>% group_by(neighbourhood)
propiedades
View(propiedades)
propiedades <- datos_nyc %>% group_by(neighbourhood) %>% summarize(total_propiedades = sum(neighbourhood))
max(datos_nyc$price)
datos_nyc$precio <- cut(datos_nyc, breaks = 3, labels = c("caro", "medio", "económico"))
datos_nyc$precio <- cut(datos_nyc$precio, breaks = 3, labels = c("caro", "medio", "económico"))
datos_nyc$price <- cut(datos_nyc$price, breaks = 3, labels = c("caro", "medio", "económico"))
View(datos_nyc)
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$precio <- cut(datos_nyc$price, breaks = 3, labels = c("caro", "medio", "económico"))
View(datos_nyc)
datos_nyc$precio <- cut(datos_nyc$price, breaks = 3, labels = c("económico", "medio", "caro"))
View(datos_nyc)
setwd("C:\\Users\\CC7\\Downloads")
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
datos_nyc$reviews_per_month <- ifelse(datos_nyc$reviews_per_month == "", NA, datos_nyc$reviews_per_month)
View(datos_nyc)
library("mice")
md.pattern(datos_nyc)
str(md.pattern(datos_nyc))
numObservacionesVacios <- md.pattern(datos_nyc)[3,17]
numObservacionesVacios
datos_nyc <- na.omit(datos_nyc)
View(datos_nyc)
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
datos_nyc$reviews_per_month <- ifelse(datos_nyc$reviews_per_month == "", NA, datos_nyc$reviews_per_month)
View(datos_nyc)
library("modeest")
propiedades <- datos_nyc %>% count(neighbourhood)
propiedades
View(propiedades)
propiedades <- datos_nyc %>% count(neighbourhood)
propiedades <- datos_nyc %>% count(neighbourhood)
View(propiedades)
setwd("C:\\Users\\CC7\\Downloads")
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
View(datos_nyc)
library("mice")
numObservacionesVacios <- md.pattern(datos_nyc)[3,17]
numObservacionesVacios
datos_nyc <- na.omit(datos_nyc)
View(datos_nyc)
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
View(datos_nyc)
nrow(datos_nyc[!complete.cases(datos_nyc),])
numObservacionesVacios <- md.pattern(datos_nyc)[3,17]
numObservacionesVacios
datos_nyc <- na.omit(datos_nyc)
View(datos_nyc)
datos_nyc <- read.csv("AB_NYC_2019.csv")
View(datos_nyc)
datos_nyc$last_review <- ifelse(datos_nyc$last_review == "", NA, datos_nyc$last_review)
View(datos_nyc)
library("modeest")
datos_nyc$last_review <- ifelse(is.na(datos_nyc$last_review), mfv(datos_nyc$last_review, na_rm = TRUE), datos_nyc$last_review)
View(datos_nyc)
datos_nyc$reviews_per_month <- ifelse(is.na(datos_nyc$reviews_per_month), mfv(datos_nyc$reviews_per_month, na_rm = TRUE), datos_nyc$reviews_per_month)
View(datos_nyc)
length(boxplot.stats(datos_nyc$number_of_reviews)$out)
library("dplyr")
propiedades <- datos_nyc %>% count(neighbourhood)
View(propiedades)
tipos <-factor(datos_nyc$room_type)
nlevels(tipos)
nrow(datos_nyc[datos_nyc$price >= 5000 & datos_nyc$price <= 7500,])
datos_nyc$precio <- cut(datos_nyc$price, breaks = 3, labels = c("económico", "medio", "caro"))
View(datos_nyc)
View(USArrests)
datos <- USArrests
setwd("~/Miriam 9°A/BD")
source("~/Miriam 9°A/BD/agrupamiento.R")
source("~/Miriam 9°A/BD/agrupamiento.R")
source("~/Miriam 9°A/BD/agrupamiento.R")
dato <- scale(datos[,1:3])
dato
install.packages("factoextra")
library("factoextra")
install.packages("factoextra")
fviz_nbclust(datos, kmeans, method="wss")
library("factoextra")
fviz_nbclust(datos, kmeans, method="wss")
fviz_nbclust(datos, kmeans, method="silhouette")
fviz_nbclust(datos, kmeans, method="gap_stat")
install.packages("NbClust")
library("NbClust")
clusters <- NbClust(datos, distance="euclidean")
clusters <- NbClust(datos, distance="euclidean", min.nc = 2, max.nc = 10, method ="kmeans",
index = "alllong")
clusters
agrupamiento <- kmeans(datos,2)
agrupamiento
fviz_cluster(agrupamiento, datos)
fviz_cluster(agrupamiento, data = datos, ellipse.type = "norm", palette = "Set2",
ggtheme = theme_minimal())
datos <- USArrests
datos$cluster <- agrupamiento$cluster
datos
datos
datos$cluster <- ifelse(datos$cluster == 1, "Más violento", "Menos violento")
datos
fviz_nbclust(datos, kmeans, method="gap_stat")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
datos <- read.csv("taipei_hotel1.csv")
datos <- scale(datos)
datos <- read.csv("taipei_hotel1.csv")
datos <- scale(datos)
datos
View(USArrests)
View(datos)
datos <- scale(datos[,3:4])
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
agrupamiento <- kmeans(datos,3)
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
plot(datos1$lon, datos1$lat, col=datos1$cluster)
source("C:/Users/CC7/Documents/Miriam 9°A/BD/agrupamiento ejercicio 1107.R")
datos2
